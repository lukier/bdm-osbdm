#! /bin/sh -ex

# $Id: tcompile,v 1.4 2004/03/26 20:46:44 joewolf Exp $
#
# A helper to compile and test flash driver plugins.
#
# 2003-12-28 Josef Wolf (jw@raven.inka.de)
#
# Portions of this program which I authored may be used for any purpose
# so long as this notice is left intact. 
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.


# This file is a helper to compile and test driver plugins. In the long term,
# it should be replaced by proper autoconf magic.

BDMDEVICE=$1   # The bdm device
FILE=$2        # The file we want to download into flash.

if [ ! -e "$FILE" ] ; then
    echo "Usage: $0 [host[:port]]/dev/bdmXXX foobar.cof"
    exit 1
fi

# Where the sources for the drivers can be found
cd `echo $0 | sed 's!/[^/]*$!!'` || exit 1

# The known drivers.
drivers="flash29"

P1="-ansi -std=c89"
P2="-pedantic -Wall -Wcast-align -Wstrict-prototypes -Wmissing-prototypes"
P3="-O2 -fforce-addr -m68332 -msoft-float -fomit-frame-pointer"
#P4="-ftracer -frename-registers"
P5="-mpcrel"
P6="-DHOST_FLASHING=0"

OPT="$P1 $P2 $P3 $P4 $P5 $P6"

# compile target driver plugins
for driver in $drivers ; do
    m68k-coff-gcc $OPT -fverbose-asm -S -o plugin-${driver}.s ${driver}.c
    m68k-coff-gcc $OPT                  -o plugin-${driver}   ${driver}.c
done

# compile/install bdm utilities
( cd /m/spool/tmp/build-crossgcc/build/m68k-bdm; make install || exit 1 ) || exit 1

# Now program the beast.
cat <<__EOF__ | m68k-coff-bdmctrl -v1
 open $BDMDEVICE
 reset
 write %dfc 5 b
 write %sfc 5 b
 write 0x00fffa00 0x041c4 w     # set MCR
 write 0x00fffa04 0xa5    b     # set target to 20MHz
 write 0x00fffa21 0x4c    b     # disable Watchdog
 write 0x00fffa48 0x000067830 L # CSBOOT 512K@0x0,asy,both,rw,as,0wait,s/u

# This one uses 68332's 2KB internal RAM
# write 0x00fffb04 0x1000  w     # set RAMBAR to map internal RAM to 0x100000
# flash-plugin 0x100000 0x800 plugin-flash29

 write 0x00fffa4c 0x080076830 l # CS0: 1024KB,$800000,asy,both,r,as,0wait,s/u
 write 0x00fffa50 0x080073030 l # CS1: 1024KB,$800000,asy,lower,w,as,0wait,s/u
 write 0x00fffa54 0x080075030 l # CS2: 1024KB,$800000,asy,upper,w,as,0wait,s/u
 flash-plugin 0x800000 0x100000 plugin-flash29

 flash 0x0                      # autodetect flash on address 0x0
 erase 0x0 -1                   # erase whole chip(s)
 erase-wait 0x0                 # wait for erase operation to complete
 load $FILE                     # program the flash
 dump-mem 0 64 L                # let's see whether it worked.
__EOF__
